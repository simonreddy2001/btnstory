{"version":3,"file":"main.39e77c69e4f734e9d627.hot-update.js","sources":["webpack:///./src/components/form/SignupForm.component.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './SignupForm.styles.css';\n\nconst validationPatterns = {\n  name: /^[a-zA-Z\\s]+$/,\n  email:\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n  mobile: /^((\\(?\\+45\\)?)?)(\\s?\\d{2}\\s?\\d{2}\\s?\\d{2}\\s?\\d{2})$/,\n  street: /^((.){1,}(\\d){1,}(.){0,})$/,\n  zipCode: /^[D-d][K-k]( |-)[1-9]{1}[0-9]{3}$/,\n};\n\nconst errorMessage = {\n  required: 'is required',\n  name: 'Name can not include Number',\n  email: 'Please enter a valid email address: example@domain.com',\n  mobile:\n    'Please enter a valid mobile number:  (+45) 35 35 35 35 ||| +45 35 35 35 35 ||| 35 35 35 35 ||| 35353535',\n  streetName:\n    'Please enter a valid address: Teststreet 32 | Tørststræde 4 | Tørststræde 24 1. tv',\n  city: 'City name is required',\n  zipCode: 'Please enter a valid zipCode: DK-1234|||dk 1234|||Dk-1234',\n};\n\nexport const SignupForm = ({ text, label, handlePost }) => {\n  const [formState, setFormState] = useState({\n    name: '',\n    email: '',\n    mobile: '',\n    streetName: '',\n    city: '',\n    zipCode: '',\n  });\n\n  const [isMessageSent, setIsMessageSent] = useState(false);\n  const [isAllInputProvided, setIsAllInputProvided] = useState(false);\n  const [errorState, setErrorState] = useState([]);\n  const [errors, setErrors] = useState([]);\n  useEffect(() => {\n    if (\n      formState.name &&\n      formState.email &&\n      formState.mobile &&\n      formState.streetName &&\n      formState.city &&\n      formState.zipCode\n    ) {\n      setIsAllInputProvided(true);\n    } else {\n      setIsAllInputProvided(false);\n    }\n  }, [formState]);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormState({ ...formState, [name]: value.trim() });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    let errors = {};\n    errors = Object.keys(formState).map((key) => {\n      const error = {\n        field: key,\n        message: '',\n      };\n      if (!formState[key]) {\n        error.message = `${[key]} ${errorMessage.required}`;\n      } else if (\n        Object.prototype.hasOwnProperty.call(validationPatterns, `${key}`)\n      ) {\n        if (!formState[key].match(validationPatterns[key])) {\n          error.message = errorMessage[key];\n        }\n      }\n      return error;\n    });\n    setErrorState(errors);\n\n    if (errors.filter((err) => err.message !== '').length === 0) {\n      handlePost(\n        formState.name,\n        formState.email,\n        formState.mobile,\n        formState.streetName,\n        formState.city,\n        formState.zipCode,\n      );\n      setIsMessageSent(true);\n      setFormState({\n        name: '',\n        email: '',\n        mobile: '',\n        streetName: '',\n        city: '',\n        zipCode: '',\n      });\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"signup-form-container\">\n        <div className=\"wrapper-outer\">\n          <form id=\"signupForm\">\n            <div className=\"wrapper\">\n              {isMessageSent ? (\n                <p className=\"successMsg\">Yor data submitted</p>\n              ) : (\n                <div className=\"errorMsg\">\n                  {errorState.map((error) => (\n                    <p>{error.message}</p>\n                  ))}\n                </div>\n              )}\n\n              <div className=\"form-row\">\n                <label htmlFor=\"name\">\n                  name <span className=\"requiredStar\">*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"name\"\n                  name=\"name\"\n                  value={formState.name}\n                  placeholder=\"type your name\"\n                  onChange={handleChange}\n                  required\n                />\n                <div>\n                  <span className=\"text-danger\">{errors.name}</span>\n                </div>\n              </div>\n\n              <div className=\"form-row\">\n                <label htmlFor=\"email\">\n                  email <span className=\"requiredStar\">*</span>\n                </label>\n                <input\n                  type=\"email\"\n                  id=\"email\"\n                  name=\"email\"\n                  value={formState.email}\n                  placeholder=\"type your email\"\n                  onChange={handleChange}\n                  required\n                />\n                <div>\n                  <span className=\"text-danger\">{errors.email}</span>\n                </div>\n              </div>\n\n              <div className=\"form-row\">\n                <label htmlFor=\"mobile\">\n                  mobile <span className=\"requiredStar\">*</span>\n                </label>\n                <input\n                  type=\"tel\"\n                  id=\"mobile\"\n                  name=\"mobile\"\n                  value={formState.mobile}\n                  placeholder=\"type your mobile\"\n                  onChange={handleChange}\n                  required\n                />\n                <div>\n                  <span className=\"text-danger\">{errors.mobile}</span>\n                </div>\n              </div>\n\n              <p> DELIVERY ADDRESS</p>\n\n              <div className=\"form-row\">\n                <label htmlFor=\"streetName\">\n                  street name <span className=\"requiredStar\">*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"streetName\"\n                  name=\"streetName\"\n                  value={formState.streetName}\n                  placeholder=\"type your street name\"\n                  onChange={handleChange}\n                  required\n                />\n                <div>\n                  <span className=\"text-danger\">{errors.streetName}</span>\n                </div>\n              </div>\n\n              <div className=\"form-row\">\n                <label htmlFor=\"city\">\n                  city <span className=\"requiredStar\">*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"city\"\n                  name=\"city\"\n                  value={formState.city}\n                  placeholder=\"type your city name\"\n                  onChange={handleChange}\n                  required\n                />\n                <div>\n                  <span className=\"text-danger\">{errors.city}</span>\n                </div>\n              </div>\n\n              <div className=\"form-row\">\n                <label htmlFor=\"zipCode\">\n                  zip code <span className=\"requiredStar\">*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"zipCode\"\n                  name=\"zipCode\"\n                  value={formState.zipCode}\n                  placeholder=\"type your zip-code\"\n                  onChange={handleChange}\n                  required\n                />\n                <div>\n                  <span className=\"text-danger\">{errors.zipCode}</span>\n                </div>\n              </div>\n\n              <div className=\"form-row\">\n                <button\n                  className={\n                    isAllInputProvided\n                      ? 'allInputProvided'\n                      : 'notAllInputProvided'\n                  }\n                  type=\"submit\"\n                  label={label}\n                  onClick={handleSubmit}\n                >\n                  {text}\n                </button>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nSignupForm.propTypes = {\n  text: PropTypes.string,\n  label: PropTypes.string.isRequired,\n  handlePost: PropTypes.func,\n};\n\nSignupForm.defaultProps = {\n  text: null,\n  handlePost: () => { },\n};\n"],"mappings":"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","sourceRoot":""}